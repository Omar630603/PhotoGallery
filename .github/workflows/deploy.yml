name: Deploy PhotoGallery

on:
  push:
    branches:
      - "*"
jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: "Start build job"
        run: |
          echo "Starting the build job"

      - name: "Checkout"
        uses: actions/checkout@v2

      - name: "Setup nodejs"
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - run: yarn install

      - name: "Login to Dockerhub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: "Build and push"
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/photogallery .
          docker push ${{ secrets.DOCKERHUB_USERNAME}}/photogallery

      - name: "Write config"
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/oci_api_key.pem
          echo "${{secrets.OCI_KEY_PUBLIC}}" >> ~/.oci/oci_api_key_public.pem

      - name: "Install OCI CLI"
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: "Fix Config File Permissions"
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/oci_api_key.pem

      - name: "Check Existing Instance"
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --display-namephoto-gallery \
            --query "data [0].id" \
            --raw-output \
            )" >> $GITHUB_ENV

      - name: "Create Instance"
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
            -c ${{secrets.VM_COMPARTMENT_OCID}} \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --shape ${{secrets.VM_SHAPE}} \
            --shape-config '{"memoryInGBs": 1, "ocpus": 1}' \
            --assign-public-ip true \
            --display-namephoto-gallery \
            --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
            --ssh-authorized-keys-file /home/runner/.oci/oci_api_key_public.pem \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            --wait-for-state RUNNING \
            --query "data.id" \
            --raw-output \
            )" >> $GITHUB_ENV
      - name: "Get Instance IP"
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
            )" >> $GITHUB_ENV
          echo Instance IP: ${{ env.INSTANCE_IP }}
      - name: "Wait for SSH"
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
          sleep 5
          echo "SSH not available..."
          done; echo "SSH ready!"

      - name: "Deploy Deployment Configuration"
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: ubuntu
          key: ${{ secrets.OCI_KEY_FILE }}
          source: "docker-compose.yml"
          target: "./"

      - name: "Running Docker Compose"
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: ubuntu
          key: ${{secrets.OCI_KEY_FILE}}
          script: |
            sudo apt update 
            sudo apt -y install apache2
            sudo iptables -I INPUT 6 -m state --state NEW -p tcp --dport 80 -j ACCEPT 
            sudo netfilter-persistent save 
            sudo systemctl restart apache2 
            sudo apt install libapache2-mod-php php php-common php-xml php-gd php-opcache php-mbstring php-tokenizer php-json php-bcmath php-zip unzip
            sudo apt-get install php7.4-curl
            sudo apt-get install php-mysql
            sudo service apache2 restart
            sudo chown www-data:www-data -R *
            curl -sS https://getcomposer.org/installer | php
            sudo sudo mv composer.phar /usr/local/bin/composer
            sudo cd /var/www
            sudo git clone https://github.com/Omar630603/PhotoGallery.git
            sudo cd /var/www/PhotoGallery
            sudo composer install
            sudo chown -R www-data.www-data /var/www/PhotoGallery
            sudo chmod -R 755 /var/www/PhotoGallery
            sudo chmod -R 777 /var/www/PhotoGallery/storage
            sudo cd /etc/apache2/sites-available/ 
            sudo nano PhotoGallery.conf
            <VirtualHost *:80>
                    ServerAdmin omar@localhost
                    DocumentRoot /var/www/PhotoGallery/public
                    <Directory />
                            Options FollowSymLinks
                            AllowOverride None
                    </Directory>
                    <Directory /var/www/PhotoGallery>
                            AllowOverride All
                    </Directory>
                    ErrorLog ${APACHE_LOG_DIR}/error.log
                    CustomLog ${APACHE_LOG_DIR}/access.log combined
            </VirtualHost>
            X
            yes
            sudo a2enmod rewrite
            sudo a2dissite 000-default.conf
            sudo a2ensite PhotoGallery.conf
            sudo apachectl configtest
            sudo systemctl restart apache2
            sudo cd /var/www/PhotoGallery
            sudo cd /var/www/PhotoGallery
            sudo php artisan key:generate
            sudo php artisan migrate:fresh
            sudo php artisan db:seed
